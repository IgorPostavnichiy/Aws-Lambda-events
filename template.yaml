AWSTemplateFormatVersion: 2010-09-09
Description: >
    An example Lambda deployment using CloudFormation.
    https://github.com/IgorPostavnichiy/Aws-Lambda-events
Parameters:
  LambdaFunctionName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the Lambda function to be deployed
    Default: Lambda-Function-CFNExample
  LambdaRoleName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the IAM role used as the Lambda execution role
    Default: Lambda-Role-CFNExample
  LambdaPolicyName:
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '[\w+=,.@-]+'
    Default: Lambda-Policy-CFNExample
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
        - !Ref LambdaPolicy

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref LambdaPolicyName
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Join ['',['arn:', !Ref AWS::Partition, ':logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/', !Ref LambdaFunctionName, ':*']]
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['',['/aws/lambda/', !Ref LambdaFunctionName]]
      RetentionInDays: 30

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          from botocore.exceptions import ClientError

          sts = boto3.client('sts')
          s3 = boto3.resource('s3')
          ec2 = boto3.client('ec2')

          def is_self_invocation(detail):
              try:
                  identity = sts.get_caller_identity()
                  if 'userIdentity' in detail:
                      if 'arn' in detail['userIdentity'] and 'Arn' in identity:
                          if identity['Arn'] == detail['userIdentity']['arn']:
                              return True
              except ClientError as e:
                  print('STS Error: {0}'.format(e))

              return False

          def get_bucket_name(instance_id):
              response = ec2.describe_instances(InstanceIds=[instance_id])
              instances = response['Reservations'][0]['Instances']
              for instance in instances:
                  for tag in instance['Tags']:
                      if tag['Key'] == 'Bucket':
                          return tag['Value']
              return None

          def lambda_handler(event, context):
              if 'detail' in event:
                  detail = event['detail']
                  if is_self_invocation(detail):
                      return json.dumps({
                          'result': 'FAILURE',
                          'data': 'Self invocation via CloudWatch Event'
                      })
                  if 'requestParameters' in detail:
                      if detail['requestParameters']['eventType'] == 'AwsApiCall':
                          if detail['requestParameters']['eventName'] == 'TerminateInstances':
                              instance_ids = [i['instanceId'] for i in detail['resources']]
                              for instance_id in instance_ids:
                                  bucket_name = get_bucket_name(instance_id)
                                  if bucket_name:
                                      bucket = s3.Bucket(bucket_name)
                                      objects = list(bucket.objects.all())
                                      if objects:
                                          # Clearing the S3 bucket if it contains objects
                                          bucket.delete_objects(
                                              Delete={
                                                  'Objects': [{'Key': obj.key} for obj in objects]
                                              }
                                          )
                                          print(f"Removed objects from the S3 bucket {bucket_name}")
                                      # Deleting the S3 bucket if it is empty
                                      if len(list(bucket.objects.all())) == 0:
                                          bucket.delete()
                                          print(f"S3 bucket {bucket_name} deleted")

              return json.dumps({
                  'result': 'SUCCESS',
                  'data': 'It worked!'
              })

      Handler: lambda_handler
      Runtime: python3.8
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
