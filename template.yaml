AWSTemplateFormatVersion: 2010-09-09
Description: >
    An example Lambda deployment using CloudFormation.
    https://github.com/IgorPostavnichiy/Aws-Lambda-events
Parameters:
  LambdaFunctionName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the Lambda function to be deployed
    Default: Lambda-Function-CFNExample
  LambdaRoleName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the IAM role used as the Lambda execution role
    Default: Lambda-Role-CFNExample
  LambdaPolicyName:
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '[\w+=,.@-]+'
    Default: Lambda-Policy-CFNExample
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
        - !Ref LambdaPolicy

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref LambdaPolicyName
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Join ['',['arn:', !Ref AWS::Partition, ':logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/', !Ref LambdaFunctionName, ':*']]
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['',['/aws/lambda/', !Ref LambdaFunctionName]]
      RetentionInDays: 30

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
       ZipFile: |
          import boto3
          import json
          import logging

          sts = boto3.client('sts')
          s3 = boto3.resource('s3')
          ec2 = boto3.client('ec2')

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def is_self_invocation(detail):
              try:
                  identity = sts.get_caller_identity()
                  if 'userIdentity' in detail:
                      if 'arn' in detail['userIdentity'] and 'Arn' in identity:
                          if identity['Arn'] == detail['userIdentity']['arn']:
                              return True
              except ClientError as e:
                  logger.error('STS Error: {0}'.format(e))

              return False

          def get_bucket_name(instance_id):
              response = ec2.describe_instances(InstanceIds=[instance_id])
              instances = response['Reservations'][0]['Instances']
              for instance in instances:
                  for tag in instance['Tags']:
                      if tag['Key'] == 'S3-Owner':
                          return tag['Value']
              return None

          def should_wipe_bucket(instance_id):
              response = ec2.describe_instances(InstanceIds=[instance_id])
              instances = response['Reservations'][0]['Instances']
              for instance in instances:
                  for tag in instance['Tags']:
                      if tag['Key'] == 'S3-Wipe':
                          return tag['Value'] == 'true'
              return False

          def wipe_bucket(bucket):
              try:
                  bucket.objects.all().delete()
                  logger.info(f"Wiped S3 bucket {bucket.name} recursively")
                  return True
              except Exception as e:
                  logger.error(f"Error wiping S3 bucket {bucket.name}: {str(e)}")
                  return False

          def delete_bucket(bucket_name):
              s3_client = boto3.client('s3')

              # Deleting all objects in S3-Bucket
              response = s3_client.list_objects_v2(Bucket=bucket_name)
              if 'Contents' in response:
                  objects = [{'Key': obj['Key']} for obj in response['Contents']]
                  s3_client.delete_objects(Bucket=bucket_name, Delete={'Objects': objects})

              # Removing S3-Bucket
              s3_client.delete_bucket(Bucket=bucket_name)

          def lambda_handler(event, context):
              if 'detail' in event:
                  detail = event['detail']
                  if is_self_invocation(detail):
                      logger.info("Self invocation via CloudWatch Event")
                      return json.dumps({
                          'result': 'FAILURE',
                          'data': 'Self invocation via CloudWatch Event'
                      })
                  if 'detail-type' in event and event['detail-type'] == 'EC2 Instance State-change Notification':
                      instance_id = detail['instance-id']
                      bucket_name = get_bucket_name(instance_id)
                      if bucket_name:
                          bucket = s3.Bucket(bucket_name)
                          if should_wipe_bucket(instance_id):
                              if wipe_bucket(bucket):
                                  logger.info(f"S3 bucket {bucket.name} wiped successfully")
                              else:
                                  logger.error(f"Error occurred while wiping S3 bucket {bucket.name}")
                          else:
                              objects = list(bucket.objects.all())
                              if objects:
                                  try:
                                      # Clearing the S3 bucket if it contains objects
                                      bucket.delete_objects(
                                          Delete={
                                              'Objects': [{'Key': obj.key} for obj in objects]
                                          }
                                      )
                                      logger.info(f"Removed objects from the S3 bucket {bucket.name}")
                                  except Exception as e:
                                      logger.error(f"Error removing objects from S3 bucket {bucket.name}: {str(e)}")
                              else:
                                  logger.info(f"S3 bucket {bucket.name} is empty, skipping deletion")

                              # Deleting the S3 bucket if it is empty
                              if len(list(bucket.objects.all())) == 0:
                                  try:
                                      bucket.delete()
                                      logger.info(f"S3 bucket {bucket.name} deleted")
                                  except Exception as e:
                                      logger.error(f"Error deleting S3 bucket {bucket.name}: {str(e)}")
                              else:
                                  logger.info(f"S3 bucket {bucket.name} is not empty, skipping deletion")

              return json.dumps({
                  'result': 'SUCCESS',
                  'data': 'It worked!'
              })
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      
  Outputs:
    LambdaFunctionName:
      Value: !Ref MyLambdaFunction
  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule to trigger the Lambda function
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: TargetFunction

  MyEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyEventRule.Arn
